{"version":3,"sources":["Components/Main.jsx","Components/Login.jsx","Test.jsx","App.js","serviceWorker.js","index.js"],"names":["Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","data","columns","Header","accessor","setState","class","time","react_default","a","createElement","es","Component","Login","resp","console","log","alert","id","Typist_default","Delay","ms","Backspace","count","delay","google_login_default","buttonText","clientId","onSuccess","successLogin","onFailure","failLogin","Test","loggedIn","BrowserRouter","Link","to","Route","exact","path","component","App","className","src_Test","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4ca40ed.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactTable from 'react-table';\n\nexport default class Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      data: [],\n      columns: [\n        {\n          Header: 'Class',\n          accessor:'class'\n        },\n        {\n          Header: 'Time',\n          accessor: 'time'\n        }\n      ]\n    };\n  }\n\n  componentWillMount() {\n    this.setState({name: 'Josh'});\n    let data = [\n      {\n        class: 'CSCI201',\n        time: '9:00AM'\n      }\n    ];\n    this.setState({data: data});\n  }\n\n  render() {\n    return (\n      <div>\n       <h1>Hi {this.state.name}, we got you for:</h1>\n        <ReactTable\n          data={this.state.data}\n          columns={this.state.columns}\n        />\n     </div>\n    );\n  }\n}\n","import GoogleLogin from 'react-google-login';\nimport Typist from 'react-typist';\nimport React, { Component } from 'react';\nimport './Login.css';\n\nexport default class Login extends Component {\n  successLogin(resp) {\n    console.log(resp);\n  }\n\n  failLogin(resp) {\n    alert('Error', resp);\n  }\n\n  render() {\n    return (\n      <div id=\"login\">\n        <Typist>\n          <Typist.Delay ms={1000}/>\n          <span>Arkaive</span>\n          <Typist.Backspace count={7} delay={500}/>\n          <span>AutoArkaive</span>\n        </Typist>\n        <GoogleLogin\n          buttonText=\"Login\"\n          clientId=\"317302246616-hflle8oaqav6fl3ldl1asl8e2m2deket.apps.googleusercontent.com\"\n          onSuccess={this.successLogin}\n          onFailure={this.failLogin}\n        />\n      </div>\n    );\n  }\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Main from './Components/Main';\nimport Login from './Components/Login';\nimport './App.css';\n\n\nlet Test = (props) => { \n  if(props.loggedIn) {\n    return (\n      <Router>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/autoarkaive\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/\">Login</Link>\n            </li>\n          </ul>\n\n          <Route exact path=\"/\" component={Login}/>\n          <Route path=\"/autoarkaive\" component={Main}/>\n        </div>\n      </Router>\n    );\n  }\n  else {\n    return (\n      <Router>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/\">Login</Link>\n            </li>\n          </ul>\n\n          <Route exact path=\"/\" component={Login}/>\n          <Route path=\"/autoarkaive\" component={Main}/>\n        </div>\n      </Router>\n    );\n  }\n};\n\nexport default Test;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Main from './Components/Main';\nimport Login from './Components/Login';\nimport './App.css';\nimport Test from './Test.jsx';\n\nlet App = () => (\n  <div className=\"App\">\n    <Test loggedIn={true}/>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}